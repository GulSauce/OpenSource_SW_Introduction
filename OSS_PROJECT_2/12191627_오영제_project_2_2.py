# -*- coding: utf-8 -*-
"""12191627_오영제_Project#2-2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMW6UBV45YlFi4KD0aSyvse5xXPxc7y-
"""

from google.colab import files
file_upload = files.upload()

import io
import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split

from sklearn.metrics import mean_squared_error

from sklearn.tree import DecisionTreeRegressor

from sklearn.ensemble import RandomForestRegressor

from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler


def sort_dataset(dataset_df):
  return dataset_df.sort_values(by='year')

def split_dataset(dataset_df):
  return train_test_split(dataset_df.drop('salary', axis = 1), dataset_df['salary']*0.001, train_size=1718, shuffle = False)

def extract_numerical_cols(dataset_df):
  numerical = ['age', 'G', 'PA', 'AB', 'R', 'H', '2B', '3B', 'HR', 'RBI', 'SB', 'CS', 'BB', 'HBP', 'SO', 'GDP', 'fly', 'war']
  return dataset_df[numerical]

def train_predict_decision_tree(X_train, Y_train, X_test):
  model = DecisionTreeRegressor()
  model.fit(X_train, Y_train)
  return model.predict(X_test)

def train_predict_random_forest(X_train, Y_train, X_test):
  model = RandomForestRegressor()
  model.fit(X_train, Y_train)
  return model.predict(X_test)

def train_predict_svm(X_train, Y_train, X_test):
  model = make_pipeline(StandardScaler(), SVR())
  model.fit(X_train, Y_train)
  return model.predict(X_test)

def calculate_RMSE(labels, predictions):
  mse = mean_squared_error(labels, predictions)
  return np.sqrt(mse)

if __name__=='__main__':
	#DO NOT MODIFY THIS FUNCTION UNLESS PATH TO THE CSV MUST BE CHANGED.
	data_df = pd.read_csv(io.BytesIO(file_upload["2019_kbo_for_kaggle_v2.csv"]), encoding="cp949")

	sorted_df = sort_dataset(data_df)
	X_train, X_test, Y_train, Y_test = split_dataset(sorted_df)

	X_train = extract_numerical_cols(X_train)
	X_test = extract_numerical_cols(X_test)

	dt_predictions = train_predict_decision_tree(X_train, Y_train, X_test)
	rf_predictions = train_predict_random_forest(X_train, Y_train, X_test)
	svm_predictions = train_predict_svm(X_train, Y_train, X_test)

	print ("Decision Tree Test RMSE: ", calculate_RMSE(Y_test, dt_predictions))
	print ("Random Forest Test RMSE: ", calculate_RMSE(Y_test, rf_predictions))
	print ("SVM Test RMSE: ", calculate_RMSE(Y_test, svm_predictions))